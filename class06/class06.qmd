---
title: "Class 06: R Functions"
author: "Yufei (A16222438)"
format: pdf
---

# All about functions in R

Functions are the way we get stuff done in R. We call a function to read data, compute stuff, plot stuff, etc.

R makes writing functions accessable but we should always start by trying to get a working snippet of code before we write our function.

## Today's lab

We will grade a whole class of student assignments. We will always try to start with a simplified version of the problem.

```{r}
# Example input vectors to start with
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
```

If we want to average, we can use the `mean()` function:
```{r}
mean(student1)
```


Let's be nice instructors and drop the lowest score so the answer here should be 100.

We can use `min()` function to find the lowest value

```{r}
min(student1)
```

We found the `which.min()` function that may be useful here. Let's try how it works:
```{r}
student1
which.min(student1)
```

We can find the lowest score by
```{r}
student1[which.min(student1)]
```

And remove the lowest score element from the vector by adding a - syntax
```{r}
student1[-which.min(student1)]
```

Then calculate the new average after removing the lowest score
```{r}
mean(student1[-which.min(student1)])
```

Check if it works for student2
```{r}
student2
mean(student2[-which.min(student2)])
```

Where is the problem
```{r}
mean(student2)
```

It is the `mean()` with NA input that failed to calculate the mean value. Remove the NA value by na.rm.
```{r}
student2
student2[-which.min(student2)]
mean(student2[-which.min(student2)], na.rm = TRUE)
```
Thisis still not what we want. We need to remove NA instead of 80.

Test on student3
```{r}
student3
mean(student3, na.rm = TRUE)
```

Still, we don't want to remove all the NA. But we want to simplify vector names before further troubleshooting.
```{r}
x <- student2
```

We want to overwrite NA value with zero.
Google and Claude suggests we can use `is.na()` function.
```{r}
x
is.na(x)
x[is.na(x)]
```

We can use logicals to index a vector
```{r}
y<- 1:5
y
y>3
# find the index of items that are greater than 3
y[y>3]
# give those items new value by <- sign
y[y>3] <- 100
y
```
We can do the same thing to x
```{r}
# Give NA item value 0.
x[is.na(x)] <- 0
x
```
Calculate the score for student2
```{r}
# Give NA item value 0.
x[is.na(x)] <- 0
x
# Drop the lowest value, and calculate mean
mean(x[-which.min(x)])
```

This is my working snippet of code that solves the problem for all my student inputs. Calculate the score for student3
```{r}
x <- student3
x[is.na(x)] <- 0
x
mean(x[-which.min(x)])
```

We can turn this into a function.

> **Q1**. Write a function grade() to determine an overall grade from a vector of student homework assignment scores dropping the lowest single score. If a student misses a homework (i.e. has an NA value) this can be used as a score to be potentially dropped. Your final function should be adquately explained with code comments and be able to work on an example class gradebook such as this one in CSV format: “https://tinyurl.com/gradeinput” [3pts]

```{r}
grade <- function (x) {
  # Mask NA value to 0
  x[is.na(x)] <- 0
  # Drop lowest score and get the mean
  mean(x[-which.min(x)])
}
```

Try to use this function
```{r}
grade(student1)
grade(student2)
grade(student3)
```

We need to read from gradebook
```{r}
gradebook <- read.csv( "https://tinyurl.com/gradeinput", row.names=1)
gradebook
```

We can use `apply()` function to apply function to our data.
```{r}
#apply(x, MARGIN, FUN...). Margin = 1 indicates to operate by row, 2 indicates column
overallGrade <- apply(gradebook, 1, grade)
overallGrade
```

> **Q2.** Using your grade() function and the supplied gradebook, Who is the top scoring student overall in the gradebook?

```{r}
which.max(overallGrade)
```

> **Q3.** From your analysis of the gradebook, which homework was toughest on students (i.e. obtained the lowest scores overall?

```{r}
mask = gradebook
mask[is.na(mask)] <- 0
#by taking mean, excluding NA values
hw.ave <- apply(gradebook, 2, mean, na.rm=T)
hw.ave
which.min(hw.ave)
```
We can also take the sum using this 
```{r}
#We can also by taking sum
hw.sum <- apply(gradebook, 2, sum, na.rm = T)
hw.sum
```

> **Q4.** Optional Extension: From your analysis of the gradebook, which homework was most predictive of overall score (i.e. highest correlation with average grade score)? 

```{r}
#apply cor(x, y) function, x=mask, y=overallGrade
hw.cor = apply(mask, 2, cor, y=overallGrade)
hw.cor
which.max(hw.cor)
```

